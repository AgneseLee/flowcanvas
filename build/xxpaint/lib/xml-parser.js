"use strict";
function parse(xml) {
    xml = xml.trim();
    xml = xml.replace(/<!--[\s\S]*?-->/g, '');
    return document();
    function document() {
        return {
            declaration: declaration(),
            root: tag(),
        };
    }
    function declaration() {
        var m = match(/^<\?xml\s*/);
        if (!m)
            return;
        var node = {
            attributes: {},
        };
        while (!(eos() || is('?>'))) {
            var attr = attribute();
            if (!attr)
                return node;
            node.attributes[attr.name] = attr.value;
        }
        match(/\?>\s*/);
        return node;
    }
    function tag() {
        var m = match(/^<([\w-:.]+)\s*/);
        if (!m)
            return;
        var node = {
            name: m[1],
            attributes: {},
            children: [],
        };
        while (!(eos() || is('>') || is('?>') || is('/>'))) {
            var attr = attribute();
            if (!attr)
                return node;
            node.attributes[attr.name] = attr.value;
        }
        if (match(/^\s*\/>\s*/)) {
            return node;
        }
        match(/\??>\s*/);
        node.content = content();
        var child;
        while (child = tag()) {
            node.children.push(child);
        }
        match(/^<\/[\w-:.]+>\s*/);
        return node;
    }
    function content() {
        var m = match(/^([^<]*)/);
        if (m)
            return m[1];
        return '';
    }
    function attribute() {
        var m = match(/([\w:-]+)\s*=\s*("[^"]*"|'[^']*'|\w+)\s*/);
        if (!m)
            return;
        return { name: m[1], value: strip(m[2]) };
    }
    function strip(val) {
        return val.replace(/^['"]|['"]$/g, '');
    }
    function match(re) {
        var m = xml.match(re);
        if (!m)
            return;
        xml = xml.slice(m[0].length);
        return m;
    }
    function eos() {
        return xml.length == 0;
    }
    function is(prefix) {
        return xml.indexOf(prefix) == 0;
    }
}
module.exports = parse;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieG1sLXBhcnNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy94eHBhaW50L2xpYi94bWwtcGFyc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFpQkEsU0FBUyxLQUFLLENBQUMsR0FBRztJQUNoQixHQUFHLEdBQUcsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0lBR2pCLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLGtCQUFrQixFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRTFDLE9BQU8sUUFBUSxFQUFFLENBQUM7SUFNbEIsU0FBUyxRQUFRO1FBQ2YsT0FBTztZQUNMLFdBQVcsRUFBRSxXQUFXLEVBQUU7WUFDMUIsSUFBSSxFQUFFLEdBQUcsRUFBRTtTQUNaLENBQUM7SUFDSixDQUFDO0lBTUQsU0FBUyxXQUFXO1FBQ2xCLElBQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsQ0FBQztZQUFFLE9BQU87UUFHZixJQUFNLElBQUksR0FBRztZQUNYLFVBQVUsRUFBRSxFQUFFO1NBQ2YsQ0FBQztRQUdGLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO1lBQzNCLElBQU0sSUFBSSxHQUFHLFNBQVMsRUFBRSxDQUFDO1lBQ3pCLElBQUksQ0FBQyxJQUFJO2dCQUFFLE9BQU8sSUFBSSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDekM7UUFFRCxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFaEIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBTUQsU0FBUyxHQUFHO1FBQ1YsSUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLENBQUM7WUFBRSxPQUFPO1FBR2YsSUFBTSxJQUFJLEdBQUc7WUFDWCxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNWLFVBQVUsRUFBRSxFQUFFO1lBQ2QsUUFBUSxFQUFFLEVBQUU7U0FDYixDQUFDO1FBR0YsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRTtZQUNsRCxJQUFNLElBQUksR0FBRyxTQUFTLEVBQUUsQ0FBQztZQUN6QixJQUFJLENBQUMsSUFBSTtnQkFBRSxPQUFPLElBQUksQ0FBQztZQUN2QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1NBQ3pDO1FBR0QsSUFBSSxLQUFLLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDdkIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUdqQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sRUFBRSxDQUFDO1FBR3pCLElBQUksS0FBSyxDQUFDO1FBQ1YsT0FBTyxLQUFLLEdBQUcsR0FBRyxFQUFFLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0I7UUFHRCxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUUxQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFNRCxTQUFTLE9BQU87UUFDZCxJQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDO1lBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkIsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBTUQsU0FBUyxTQUFTO1FBQ2hCLElBQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxDQUFDO1lBQUUsT0FBTztRQUNmLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUM1QyxDQUFDO0lBTUQsU0FBUyxLQUFLLENBQUMsR0FBRztRQUNoQixPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFNRCxTQUFTLEtBQUssQ0FBQyxFQUFFO1FBQ2YsSUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsQ0FBQztZQUFFLE9BQU87UUFDZixHQUFHLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0IsT0FBTyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBTUQsU0FBUyxHQUFHO1FBQ1YsT0FBTyxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBTUQsU0FBUyxFQUFFLENBQUMsTUFBTTtRQUNoQixPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xDLENBQUM7QUFDSCxDQUFDO0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbi8qKlxuICogRXhwb3NlIGBwYXJzZWAuXG4gKi9cblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gc3RyaW5nIG9mIGB4bWxgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB4bWxcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gcGFyc2UoeG1sKSB7XG4gIHhtbCA9IHhtbC50cmltKCk7XG5cbiAgLy8gc3RyaXAgY29tbWVudHNcbiAgeG1sID0geG1sLnJlcGxhY2UoLzwhLS1bXFxzXFxTXSo/LS0+L2csICcnKTtcblxuICByZXR1cm4gZG9jdW1lbnQoKTtcblxuICAvKipcbiAgICAgKiBYTUwgZG9jdW1lbnQuXG4gICAgICovXG5cbiAgZnVuY3Rpb24gZG9jdW1lbnQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRlY2xhcmF0aW9uOiBkZWNsYXJhdGlvbigpLFxuICAgICAgcm9vdDogdGFnKCksXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgICAqIERlY2xhcmF0aW9uLlxuICAgICAqL1xuXG4gIGZ1bmN0aW9uIGRlY2xhcmF0aW9uKCkge1xuICAgIGNvbnN0IG0gPSBtYXRjaCgvXjxcXD94bWxcXHMqLyk7XG4gICAgaWYgKCFtKSByZXR1cm47XG5cbiAgICAvLyB0YWdcbiAgICBjb25zdCBub2RlID0ge1xuICAgICAgYXR0cmlidXRlczoge30sXG4gICAgfTtcblxuICAgIC8vIGF0dHJpYnV0ZXNcbiAgICB3aGlsZSAoIShlb3MoKSB8fCBpcygnPz4nKSkpIHtcbiAgICAgIGNvbnN0IGF0dHIgPSBhdHRyaWJ1dGUoKTtcbiAgICAgIGlmICghYXR0cikgcmV0dXJuIG5vZGU7XG4gICAgICBub2RlLmF0dHJpYnV0ZXNbYXR0ci5uYW1lXSA9IGF0dHIudmFsdWU7XG4gICAgfVxuXG4gICAgbWF0Y2goL1xcPz5cXHMqLyk7XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIC8qKlxuICAgICAqIFRhZy5cbiAgICAgKi9cblxuICBmdW5jdGlvbiB0YWcoKSB7XG4gICAgY29uc3QgbSA9IG1hdGNoKC9ePChbXFx3LTouXSspXFxzKi8pO1xuICAgIGlmICghbSkgcmV0dXJuO1xuXG4gICAgLy8gbmFtZVxuICAgIGNvbnN0IG5vZGUgPSB7XG4gICAgICBuYW1lOiBtWzFdLFxuICAgICAgYXR0cmlidXRlczoge30sXG4gICAgICBjaGlsZHJlbjogW10sXG4gICAgfTtcblxuICAgIC8vIGF0dHJpYnV0ZXNcbiAgICB3aGlsZSAoIShlb3MoKSB8fCBpcygnPicpIHx8IGlzKCc/PicpIHx8IGlzKCcvPicpKSkge1xuICAgICAgY29uc3QgYXR0ciA9IGF0dHJpYnV0ZSgpO1xuICAgICAgaWYgKCFhdHRyKSByZXR1cm4gbm9kZTtcbiAgICAgIG5vZGUuYXR0cmlidXRlc1thdHRyLm5hbWVdID0gYXR0ci52YWx1ZTtcbiAgICB9XG5cbiAgICAvLyBzZWxmIGNsb3NpbmcgdGFnXG4gICAgaWYgKG1hdGNoKC9eXFxzKlxcLz5cXHMqLykpIHtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cblxuICAgIG1hdGNoKC9cXD8/PlxccyovKTtcblxuICAgIC8vIGNvbnRlbnRcbiAgICBub2RlLmNvbnRlbnQgPSBjb250ZW50KCk7XG5cbiAgICAvLyBjaGlsZHJlblxuICAgIGxldCBjaGlsZDtcbiAgICB3aGlsZSAoY2hpbGQgPSB0YWcoKSkge1xuICAgICAgbm9kZS5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICB9XG5cbiAgICAvLyBjbG9zaW5nXG4gICAgbWF0Y2goL148XFwvW1xcdy06Ll0rPlxccyovKTtcblxuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgLyoqXG4gICAgICogVGV4dCBjb250ZW50LlxuICAgICAqL1xuXG4gIGZ1bmN0aW9uIGNvbnRlbnQoKSB7XG4gICAgY29uc3QgbSA9IG1hdGNoKC9eKFtePF0qKS8pO1xuICAgIGlmIChtKSByZXR1cm4gbVsxXTtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICAvKipcbiAgICAgKiBBdHRyaWJ1dGUuXG4gICAgICovXG5cbiAgZnVuY3Rpb24gYXR0cmlidXRlKCkge1xuICAgIGNvbnN0IG0gPSBtYXRjaCgvKFtcXHc6LV0rKVxccyo9XFxzKihcIlteXCJdKlwifCdbXiddKid8XFx3KylcXHMqLyk7XG4gICAgaWYgKCFtKSByZXR1cm47XG4gICAgcmV0dXJuIHsgbmFtZTogbVsxXSwgdmFsdWU6IHN0cmlwKG1bMl0pIH07XG4gIH1cblxuICAvKipcbiAgICAgKiBTdHJpcCBxdW90ZXMgZnJvbSBgdmFsYC5cbiAgICAgKi9cblxuICBmdW5jdGlvbiBzdHJpcCh2YWwpIHtcbiAgICByZXR1cm4gdmFsLnJlcGxhY2UoL15bJ1wiXXxbJ1wiXSQvZywgJycpO1xuICB9XG5cbiAgLyoqXG4gICAgICogTWF0Y2ggYHJlYCBhbmQgYWR2YW5jZSB0aGUgc3RyaW5nLlxuICAgICAqL1xuXG4gIGZ1bmN0aW9uIG1hdGNoKHJlKSB7XG4gICAgY29uc3QgbSA9IHhtbC5tYXRjaChyZSk7XG4gICAgaWYgKCFtKSByZXR1cm47XG4gICAgeG1sID0geG1sLnNsaWNlKG1bMF0ubGVuZ3RoKTtcbiAgICByZXR1cm4gbTtcbiAgfVxuXG4gIC8qKlxuICAgICAqIEVuZC1vZi1zb3VyY2UuXG4gICAgICovXG5cbiAgZnVuY3Rpb24gZW9zKCkge1xuICAgIHJldHVybiB4bWwubGVuZ3RoID09IDA7XG4gIH1cblxuICAvKipcbiAgICAgKiBDaGVjayBmb3IgYHByZWZpeGAuXG4gICAgICovXG5cbiAgZnVuY3Rpb24gaXMocHJlZml4KSB7XG4gICAgcmV0dXJuIHhtbC5pbmRleE9mKHByZWZpeCkgPT0gMDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlO1xuIl19