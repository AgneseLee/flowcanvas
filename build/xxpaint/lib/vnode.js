"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.xmlToVnode = exports.initVnodeTree = exports.connectChildren = exports.createVnode = void 0;
var util_1 = require("./util");
var createVnode = function (node) {
    var _node = {
        text: node.text || '',
        url: node.url || '',
        type: node.type,
        css: node.css || {},
        islines: false,
        renderStyle: { x: 0, y: 0, contentX: 0, contentY: 0 },
        children: node.children || [],
        lines: [],
        parent: null,
        pre: null,
        next: null
    };
    return Object.assign(node, _node);
};
exports.createVnode = createVnode;
var connectChildren = function (el, isRoot) {
    if (isRoot === void 0) { isRoot = false; }
    if (hasChildren(el)) {
        _getChildren(el).forEach(function (child, index) {
            if (child.attributes['p-if'] === 'false') {
            }
            else {
                child.css = _inheritStyle(el, child);
                _setParent(child, el, isRoot);
                isRoot = false;
                _setSibling(child, _getChildren(el)[index - 1], _getChildren(el)[index + 1]);
                exports.connectChildren(child, isRoot);
            }
        });
    }
};
exports.connectChildren = connectChildren;
var initVnodeTree = function (node) {
    var nodes = [];
    if (node != null) {
        var queue = [];
        queue.unshift(node);
        while (queue.length != 0) {
            var item = queue.shift();
            item = exports.createVnode(item);
            nodes.push(item);
            var children = item.children || [];
            for (var i = 0; i < children.length; i++)
                queue.push(children[i]);
        }
    }
    exports.connectChildren(node);
    console.log('vnodeTree is: ', node);
    return node;
};
exports.initVnodeTree = initVnodeTree;
function hasChildren(vnode) {
    return !!(Array.isArray(vnode.children) && vnode.children.length);
}
function _getChildren(el) {
    return hasChildren(el) ? el.children : [];
}
function _delNode(parent, child) {
    var idx = parent.children.findIndex(function (x) { return x === child; });
    parent.children.splice(idx, 1);
}
function _setParent(curr, element, isRoot) {
    curr.parent = isRoot ? null : element;
}
function _setSibling(curr, pre, next) {
    curr.pre = pre || null;
    curr.next = next || null;
}
function _inheritStyle(parent, child) {
    var copyParentCss = JSON.parse(JSON.stringify(parent.css));
    var notInheritStyleOfParent = ['height', 'width', 'margin', 'padding', 'marginTop', 'marginLeft', 'marginBottom', 'marginRight', 'paddingLeft', 'paddingRight', 'paddingTop', 'paddingBottom'];
    for (var _i = 0, _a = Object.keys(copyParentCss); _i < _a.length; _i++) {
        var cssName = _a[_i];
        if (!notInheritStyleOfParent.includes(cssName))
            continue;
        delete copyParentCss[cssName];
    }
    var style = __assign(__assign({}, copyParentCss), child.css);
    return style;
}
function _formatVnode2(xom, style) {
    util_1.deepFirstSearch(xom, function (node) {
        if (node.attributes.class) {
            var classNames = node.attributes.class.split(' ');
            var css = classNames.reduce(function (pre, next) {
                return __assign(__assign({}, pre), style[next]);
            }, {});
            node.css = css;
        }
        if (node.attributes.class === 'img' && node.attributes.src) {
            node.url = node.attributes.src;
        }
        if (node.name === 'text') {
            node.text = node.content;
        }
        node.type = node.name;
        exports.createVnode(node);
    });
    exports.connectChildren(xom);
}
function _formatVnode(xom, style) {
    util_1.deepFirstSearch(xom, function (node) {
        if (node.attributes.class) {
            var classNames = node.attributes.class.split(' ');
            var css = classNames.reduce(function (pre, next) {
                return __assign(__assign({}, pre), style[next]);
            }, {});
            node.css = css;
        }
        if (node.attributes.class === 'img' && node.attributes.src) {
            node.url = node.attributes.src;
        }
        if (node.name === 'text') {
            node.text = node.children[0];
            node.children.length = 0;
        }
        node.type = node.name;
        exports.createVnode(node);
    });
    exports.connectChildren(xom);
}
var xmlToVnode = function (wxml, style) {
    var xom = wxml;
    _formatVnode(xom, style);
    return xom;
};
exports.xmlToVnode = xmlToVnode;
//# sourceMappingURL=data:application/json;base64,