"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var setStringPrototype = require('./util').setStringPrototype;
var Modifier = (function () {
    function Modifier(tpl) {
        var copyTpl = JSON.parse(JSON.stringify(tpl));
        this.tpl = copyTpl;
        this.views = copyTpl.views;
    }
    Modifier.prototype.insert = function (target, parentId, index) {
        if (parentId && !Number.isNaN(index)) {
            var flag = this.find(parentId);
            if (flag.length === 0)
                return;
            var node = { children: this.views };
            target.f_sid = parentId;
            return insertNode(parentId, index, node, target);
        }
    };
    Modifier.prototype.find = function (targetId) {
        var xx = cusGetElementByIdByDFS2({ children: this.views }, targetId);
        return xx;
    };
    Modifier.prototype.findParentNodeOf = function (node) {
        var targetId = node.f_sid;
        if (!targetId)
            return null;
        return this.find(targetId);
    };
    Modifier.prototype.del = function (parentId, index) {
        if (parentId && !Number.isNaN(index)) {
            var flag = this.find(parentId);
            if (flag.length === 0)
                return;
            var node = { children: this.views };
            return delNode(parentId, index, node);
        }
    };
    Modifier.prototype.update = function (target, parentId, index) {
        if (parentId && !Number.isNaN(index)) {
            var flag = this.find(parentId);
            if (flag.length === 0)
                return;
            var node = { children: this.views };
            return updateNode(parentId, index, node, target);
        }
    };
    Modifier.prototype.updateTree = function (changeNodeId, updateLeft, updateTop) {
        if (updateLeft === void 0) { updateLeft = false; }
        if (updateTop === void 0) { updateTop = true; }
        var targetNode = this.find(changeNodeId);
        var parentNode = this.find(targetNode.f_sid);
        var targetHeight = targetNode.css.height.toPx();
        var _z = this;
        (function dfs(target) {
            if (!target)
                return false;
            var _parentNode = _z.findParentNodeOf(target);
            if (!_parentNode) {
                if (_z.tpl.height === 'auto') {
                    var allH = _z.views.reduce(function (pre, next) {
                        var nextHeight = next.css.height ? next.css.height : '0px';
                        var sum = pre.toPx() + nextHeight.toPx();
                        return sum + "px";
                    }, '0px');
                    if (_z.tpl.paddingbottom) {
                        allH = allH.toPx() + _z.tpl.paddingbottom.toPx();
                        allH = allH + "px";
                    }
                    _z.tpl.height = allH;
                }
                else {
                    _z.tpl.height += targetHeight;
                    _z.tpl.height = _z.tpl.height + "px";
                }
                return false;
            }
            if (_parentNode.css.height.indexOf('px') < 0) {
                var height = _parentNode.children.reduce(function (pre, next) {
                    var nextHeight = next.css.height ? next.css.height : '0px';
                    var sum = pre.toPx() + nextHeight.toPx();
                    return sum + "px";
                }, '0px');
                _parentNode.css.height = height;
                _parentNode.processedLocation.height = height.toPx();
            }
            return dfs(_parentNode);
        }(targetNode));
        var allSiblingNodes = parentNode.children;
        var startChangeBtn = false;
        for (var _i = 0, allSiblingNodes_1 = allSiblingNodes; _i < allSiblingNodes_1.length; _i++) {
            var n = allSiblingNodes_1[_i];
            if (n.vid === changeNodeId) {
                startChangeBtn = true;
            }
            if (!startChangeBtn)
                continue;
            if (updateTop) {
                var paddingbottom = targetNode.css.paddingbottom ? targetNode.css.paddingbottom.toPx() : 0;
                n.processedLocation.y += targetNode.processedLocation ? targetNode.processedLocation.height : 0;
                n.processedLocation.y += paddingbottom;
            }
            if (updateLeft) {
                n.processedLocation.x += (targetNode.processedLocation ? targetNode.processedLocation.width : 0);
            }
        }
        this.views = this.tpl.views;
        return this.tpl;
    };
    Modifier.prototype.getAbsoluteTpl = function (_a) {
        var globalWidth = _a.globalWidth, globalHeight = _a.globalHeight;
        var node = { children: this.views };
        return __assign(__assign({}, this.tpl), { views: getNodeAbsoluteLeftTop(node, globalWidth, globalHeight) });
    };
    return Modifier;
}());
exports.default = Modifier;
function insertNode(parentId, index, node, target) {
    if (node) {
        var children = node.children;
        if (children) {
            for (var i = 0; i < children.length; i++) {
                if (children[i].vid === parentId) {
                    if (!children[i].children) {
                        children[i].children = [];
                    }
                    children[i].children.splice(index, 0, target);
                    break;
                }
                else {
                    insertNode(parentId, index, children[i], target);
                }
            }
        }
    }
    return node;
}
function delNode(parentId, index, node) {
    if (node) {
        var children = node.children;
        if (children) {
            for (var i = 0; i < children.length; i++) {
                if (children[i].vid === parentId) {
                    if (!children[i].children) {
                        children[i].children = [];
                    }
                    children[i].children.splice(index, 1);
                    break;
                }
                else {
                    delNode(parentId, index, children[i]);
                }
            }
        }
    }
    return node;
}
function updateNode(parentId, index, node, target) {
    if (node) {
        var children = node.children;
        if (children) {
            for (var i = 0; i < children.length; i++) {
                if (children[i].vid === parentId) {
                    if (!children[i].children) {
                        children[i].children = [];
                    }
                    children[i].children.splice(index, 1, target);
                    break;
                }
                else {
                    updateNode(parentId, index, children[i], target);
                }
            }
        }
    }
    return node;
}
function getNodeAbsoluteLeftTop(node, globalWidth, globalHeight, nodeList) {
    if (nodeList === void 0) { nodeList = []; }
    setStringPrototype(1, 1);
    if (node) {
        nodeList.push(node);
        var children = node.children;
        if (children) {
            for (var i = 0; i < children.length; i++) {
                children[i].processedLocation.x += (node.processedLocation ? node.processedLocation.x : 0);
                children[i].processedLocation.y += node.processedLocation ? node.processedLocation.y : 0;
                getNodeAbsoluteLeftTop(children[i], globalWidth, globalHeight, nodeList);
            }
        }
        else {
        }
    }
    return nodeList.slice(1);
}
function cusGetElementByIdByDFS2(parentNode, id) {
    if (!parentNode) {
        return null;
    }
    var stack = [];
    if (parentNode.vid === id) {
        return parentNode;
    }
    for (var i = parentNode.children.length; i > 0; i--) {
        stack.push(parentNode.children[i - 1]);
    }
    while (stack.length) {
        var node = stack.pop();
        if (node.vid === id) {
            return node;
        }
        if (node.children && node.children.length > 0) {
            stack = Array.from(node.children).concat(stack);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kaWZpZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMveHhwYWludC9saWIvbW9kaWZpZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUVBLElBQU0sa0JBQWtCLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLGtCQUFrQixDQUFDO0FBRWhFO0lBQ0Usa0JBQVksR0FBRztRQUNiLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRWhELElBQUksQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDO1FBQ25CLElBQUksQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUM3QixDQUFDO0lBS0QseUJBQU0sR0FBTixVQUFPLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSztRQUM1QixJQUFJLFFBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFFcEMsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNqQyxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQztnQkFBRSxPQUFPO1lBQzlCLElBQU0sSUFBSSxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUN0QyxNQUFNLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQztZQUN4QixPQUFPLFVBQVUsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztTQUNsRDtJQUNILENBQUM7SUFFRCx1QkFBSSxHQUFKLFVBQUssUUFBUTtRQUNYLElBQU0sRUFBRSxHQUFHLHVCQUF1QixDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUN2RSxP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QzFFO1NBQ0Y7YUFBTTtTQUdOO0tBQ0Y7SUFDRCxPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDM0IsQ0FBQztBQUVELFNBQVMsdUJBQXVCLENBQUMsVUFBVSxFQUFFLEVBQUU7SUFDN0MsSUFBSSxDQUFDLFVBQVUsRUFBRTtRQUNmLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFFRCxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7SUFDZixJQUFJLFVBQVUsQ0FBQyxHQUFHLEtBQUssRUFBRSxFQUFFO1FBQ3pCLE9BQU8sVUFBVSxDQUFDO0tBQ25CO0lBQ0QsS0FBSyxJQUFJLENBQUMsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ25ELEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN4QztJQUNELE9BQU8sS0FBSyxDQUFDLE1BQU0sRUFBRTtRQUNuQixJQUFNLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDekIsSUFBSSxJQUFJLENBQUMsR0FBRyxLQUFLLEVBQUUsRUFBRTtZQUNuQixPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUM3QyxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2pEO0tBQ0Y7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIGltcG9ydCBfdXRpbCBmcm9tICcuL3V0aWwnO1xuY29uc3Qgc2V0U3RyaW5nUHJvdG90eXBlID0gcmVxdWlyZSgnLi91dGlsJykuc2V0U3RyaW5nUHJvdG90eXBlO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2RpZmllciB7XG4gIGNvbnN0cnVjdG9yKHRwbCkge1xuICAgIGNvbnN0IGNvcHlUcGwgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRwbCkpO1xuICAgIC8vIGRlYnVnZ2VyO1xuICAgIHRoaXMudHBsID0gY29weVRwbDtcbiAgICB0aGlzLnZpZXdzID0gY29weVRwbC52aWV3cztcbiAgfVxuXG4gIC8vIHRhcmdldCDmj5LlhaXnmoTlr7nosaHoioLngrlcbiAgLy8gcGFyZW50SWQg6KKr5o+S5YWl55qE54i25Lqy6IqC54K5XG4gIC8vIGluZGV4IOeItuS6suiKgueCueeahOesrOWHoOS4quWFg+e0oFxuICBpbnNlcnQodGFyZ2V0LCBwYXJlbnRJZCwgaW5kZXgpIHtcbiAgICBpZiAocGFyZW50SWQgJiYgIU51bWJlci5pc05hTihpbmRleCkpIHtcbiAgICAgIC8vIGRlYnVnZ2VyO1xuICAgICAgY29uc3QgZmxhZyA9IHRoaXMuZmluZChwYXJlbnRJZCk7XG4gICAgICBpZiAoZmxhZy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICAgIGNvbnN0IG5vZGUgPSB7IGNoaWxkcmVuOiB0aGlzLnZpZXdzIH07XG4gICAgICB0YXJnZXQuZl9zaWQgPSBwYXJlbnRJZDtcbiAgICAgIHJldHVybiBpbnNlcnROb2RlKHBhcmVudElkLCBpbmRleCwgbm9kZSwgdGFyZ2V0KTtcbiAgICB9XG4gIH1cblxuICBmaW5kKHRhcmdldElkKSB7XG4gICAgY29uc3QgeHggPSBjdXNHZXRFbGVtZW50QnlJZEJ5REZTMih7IGNoaWxkcmVuOiB0aGlzLnZpZXdzIH0sIHRhcmdldElkKTtcbiAgICByZXR1cm4geHg7XG4gICAgLy8geHgubmFtZSA9ICdwZnBmcCc7XG4gICAgLy8gZGVidWdnZXI7XG4gICAgLy8gcmV0dXJuIGZpbmRQYXRoREZTKHRoaXMudmlld3MsIHRhcmdldElkKTtcbiAgfVxuXG4gIGZpbmRQYXJlbnROb2RlT2Yobm9kZSkge1xuICAgIGNvbnN0IHRhcmdldElkID0gbm9kZS5mX3NpZDtcbiAgICBpZiAoIXRhcmdldElkKSByZXR1cm4gbnVsbDtcbiAgICAvLyBjb25zdCB0YXJnZXROb2RlID0gdGhpcy5maW5kKHRhcmdldElkKTtcbiAgICAvLyBpZiAodGFyZ2V0Tm9kZS5sZW5ndGggPCAyKSB7IHJldHVybjsgfVxuICAgIC8vIGNvbnN0IHBhcmVudE5vZGUgPSB0YXJnZXROb2RlLnNsaWNlKC0yKVswXTtcbiAgICAvLyByZXR1cm4gcGFyZW50Tm9kZTtcbiAgICAvLyBjb25zdCB4eCA9IGN1c0dldEVsZW1lbnRCeUlkQnlERlMyKHsgY2hpbGRyZW46IHRoaXMudmlld3MgfSwgdGFyZ2V0SWQpO1xuICAgIHJldHVybiB0aGlzLmZpbmQodGFyZ2V0SWQpO1xuICB9XG5cbiAgZGVsKHBhcmVudElkLCBpbmRleCkge1xuICAgIGlmIChwYXJlbnRJZCAmJiAhTnVtYmVyLmlzTmFOKGluZGV4KSkge1xuICAgICAgY29uc3QgZmxhZyA9IHRoaXMuZmluZChwYXJlbnRJZCk7XG4gICAgICBpZiAoZmxhZy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICAgIGNvbnN0IG5vZGUgPSB7IGNoaWxkcmVuOiB0aGlzLnZpZXdzIH07XG4gICAgICByZXR1cm4gZGVsTm9kZShwYXJlbnRJZCwgaW5kZXgsIG5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIC8vIOS/ruaUueafkOS4quiKgueCueeahOS/oeaBr1xuICB1cGRhdGUodGFyZ2V0LCBwYXJlbnRJZCwgaW5kZXgpIHtcbiAgICBpZiAocGFyZW50SWQgJiYgIU51bWJlci5pc05hTihpbmRleCkpIHtcbiAgICAgIGNvbnN0IGZsYWcgPSB0aGlzLmZpbmQocGFyZW50SWQpO1xuICAgICAgaWYgKGZsYWcubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgICBjb25zdCBub2RlID0geyBjaGlsZHJlbjogdGhpcy52aWV3cyB9O1xuICAgICAgcmV0dXJuIHVwZGF0ZU5vZGUocGFyZW50SWQsIGluZGV4LCBub2RlLCB0YXJnZXQpO1xuICAgIH1cbiAgfVxuXG4gIC8vIOabtOaWsOafkOiKgueCueeahOaJgOacieeItuiKgueCueOAgeelluWFiOiKgueCueS/oeaBryjlrr3pq5jjgIHkvY3nva4pXG4gIC8vIOWFhOW8n+iKgueCuem7mOiupOabtOaWsHRvcO+8jOS4jeabtOaWsGxlZnRcbiAgdXBkYXRlVHJlZShjaGFuZ2VOb2RlSWQsIHVwZGF0ZUxlZnQgPSBmYWxzZSwgdXBkYXRlVG9wID0gdHJ1ZSkge1xuICAgIGNvbnN0IHRhcmdldE5vZGUgPSB0aGlzLmZpbmQoY2hhbmdlTm9kZUlkKTtcbiAgICBjb25zdCBwYXJlbnROb2RlID0gdGhpcy5maW5kKHRhcmdldE5vZGUuZl9zaWQpO1xuICAgIGNvbnN0IHRhcmdldEhlaWdodCA9IHRhcmdldE5vZGUuY3NzLmhlaWdodC50b1B4KCk7XG5cbiAgICAvLyDmm7TmlrDniLboioLngrnlkoznpZblhYjoioLngrnnmoTpq5jluqZcbiAgICBjb25zdCBfeiA9IHRoaXM7XG4gICAgKGZ1bmN0aW9uIGRmcyh0YXJnZXQpIHtcbiAgICAgIGlmICghdGFyZ2V0KSByZXR1cm4gZmFsc2U7XG4gICAgICBjb25zdCBfcGFyZW50Tm9kZSA9IF96LmZpbmRQYXJlbnROb2RlT2YodGFyZ2V0KTtcbiAgICAgIGlmICghX3BhcmVudE5vZGUpIHtcbiAgICAgICAgLy8g5qC56IqC54K56auY5bqm5pu05pawXG4gICAgICAgIGlmIChfei50cGwuaGVpZ2h0ID09PSAnYXV0bycpIHtcbiAgICAgICAgICAvLyDlj6rpnIDorqHnrpfkuIDnuqflrZDoioLngrnnmoTkuK3pq5jluqbljbPlj69cbiAgICAgICAgICBsZXQgYWxsSCA9IF96LnZpZXdzLnJlZHVjZSgocHJlLCBuZXh0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuZXh0SGVpZ2h0ID0gbmV4dC5jc3MuaGVpZ2h0ID8gbmV4dC5jc3MuaGVpZ2h0IDogJzBweCc7XG4gICAgICAgICAgICBjb25zdCBzdW0gPSBwcmUudG9QeCgpICsgbmV4dEhlaWdodC50b1B4KCk7XG4gICAgICAgICAgICByZXR1cm4gYCR7c3VtfXB4YDtcbiAgICAgICAgICB9LCAnMHB4Jyk7XG4gICAgICAgICAgaWYgKF96LnRwbC5wYWRkaW5nYm90dG9tKSB7XG4gICAgICAgICAgICBhbGxIID0gYWxsSC50b1B4KCkgKyBfei50cGwucGFkZGluZ2JvdHRvbS50b1B4KCk7XG4gICAgICAgICAgICBhbGxIID0gYCR7YWxsSH1weGA7XG4gICAgICAgICAgfVxuICAgICAgICAgIF96LnRwbC5oZWlnaHQgPSBhbGxIO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF96LnRwbC5oZWlnaHQgKz0gdGFyZ2V0SGVpZ2h0O1xuICAgICAgICAgIF96LnRwbC5oZWlnaHQgPSBgJHtfei50cGwuaGVpZ2h0fXB4YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIOWmguaenOeItuiKgueCueacieiHquWumuS5iemrmOW6pu+8jOWImeS7peiHqui6q+iuvue9ruS4uuWHhlxuICAgICAgaWYgKF9wYXJlbnROb2RlLmNzcy5oZWlnaHQuaW5kZXhPZigncHgnKSA8IDApIHtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gX3BhcmVudE5vZGUuY2hpbGRyZW4ucmVkdWNlKChwcmUsIG5leHQpID0+IHtcbiAgICAgICAgICBjb25zdCBuZXh0SGVpZ2h0ID0gbmV4dC5jc3MuaGVpZ2h0ID8gbmV4dC5jc3MuaGVpZ2h0IDogJzBweCc7XG4gICAgICAgICAgY29uc3Qgc3VtID0gcHJlLnRvUHgoKSArIG5leHRIZWlnaHQudG9QeCgpO1xuICAgICAgICAgIHJldHVybiBgJHtzdW19cHhgO1xuICAgICAgICB9LCAnMHB4Jyk7XG4gICAgICAgIF9wYXJlbnROb2RlLmNzcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIF9wYXJlbnROb2RlLnByb2Nlc3NlZExvY2F0aW9uLmhlaWdodCA9IGhlaWdodC50b1B4KCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkZnMoX3BhcmVudE5vZGUpO1xuICAgIH0odGFyZ2V0Tm9kZSkpO1xuXG4gICAgLy8g5ZCO6Z2i5omA5pyJ5YWE5byf6IqC54K55pu05pawbGVmdC90b3BcbiAgICBjb25zdCBhbGxTaWJsaW5nTm9kZXMgPSBwYXJlbnROb2RlLmNoaWxkcmVuO1xuICAgIGxldCBzdGFydENoYW5nZUJ0biA9IGZhbHNlO1xuICAgIGZvciAoY29uc3QgbiBvZiBhbGxTaWJsaW5nTm9kZXMpIHtcbiAgICAgIGlmIChuLnZpZCA9PT0gY2hhbmdlTm9kZUlkKSB7XG4gICAgICAgIHN0YXJ0Q2hhbmdlQnRuID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RhcnRDaGFuZ2VCdG4pIGNvbnRpbnVlOyAvLyDliY3pnaLnmoTlhYTlvJ/oioLngrnkuI3nlKjlj5hcblxuICAgICAgLy8gbi5jc3MubGVmdCA9IChuLmNzcy5sZWZ0KS50b1B4KCk7XG4gICAgICAvLyBuLmNzcy50b3AgPSAobi5jc3MudG9wKS50b1B4KCk7XG4gICAgICAvLyBuLmNzcy5sZWZ0ICs9IHRhcmdldE5vZGUuY3NzID8gdGFyZ2V0Tm9kZS5jc3MubGVmdCA6IDA7XG4gICAgICAvLyBuLmNzcy50b3AgKz0gdGFyZ2V0Tm9kZS5jc3MgPyB0YXJnZXROb2RlLmNzcy50b3AgOiAwO1xuICAgICAgaWYgKHVwZGF0ZVRvcCkge1xuICAgICAgICAvLyBkZWJ1Z2dlcjtcbiAgICAgICAgY29uc3QgcGFkZGluZ2JvdHRvbSA9IHRhcmdldE5vZGUuY3NzLnBhZGRpbmdib3R0b20gPyB0YXJnZXROb2RlLmNzcy5wYWRkaW5nYm90dG9tLnRvUHgoKSA6IDA7XG4gICAgICAgIG4ucHJvY2Vzc2VkTG9jYXRpb24ueSArPSB0YXJnZXROb2RlLnByb2Nlc3NlZExvY2F0aW9uID8gdGFyZ2V0Tm9kZS5wcm9jZXNzZWRMb2NhdGlvbi5oZWlnaHQgOiAwO1xuICAgICAgICBuLnByb2Nlc3NlZExvY2F0aW9uLnkgKz0gcGFkZGluZ2JvdHRvbTtcbiAgICAgIH1cbiAgICAgIGlmICh1cGRhdGVMZWZ0KSB7XG4gICAgICAgIG4ucHJvY2Vzc2VkTG9jYXRpb24ueCArPSAodGFyZ2V0Tm9kZS5wcm9jZXNzZWRMb2NhdGlvbiA/IHRhcmdldE5vZGUucHJvY2Vzc2VkTG9jYXRpb24ud2lkdGggOiAwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy52aWV3cyA9IHRoaXMudHBsLnZpZXdzO1xuICAgIC8vIGRlYnVnZ2VyO1xuICAgIHJldHVybiB0aGlzLnRwbDtcbiAgfVxuXG4gIGdldEFic29sdXRlVHBsKHsgZ2xvYmFsV2lkdGgsIGdsb2JhbEhlaWdodCB9KSB7XG4gICAgY29uc3Qgbm9kZSA9IHsgY2hpbGRyZW46IHRoaXMudmlld3MgfTtcbiAgICByZXR1cm4geyAuLi50aGlzLnRwbCwgLi4ueyB2aWV3czogZ2V0Tm9kZUFic29sdXRlTGVmdFRvcChub2RlLCBnbG9iYWxXaWR0aCwgZ2xvYmFsSGVpZ2h0KSB9IH07XG4gIH1cbn1cblxuLy8g5L+d5oyB5bWM5aWX57uT5p6E5o+S5YWlXG5mdW5jdGlvbiBpbnNlcnROb2RlKHBhcmVudElkLCBpbmRleCwgbm9kZSwgdGFyZ2V0KSB7XG4gIGlmIChub2RlKSB7XG4gICAgLy8gbm9kZUxpc3QucHVzaChub2RlKVxuICAgIGNvbnN0IGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGNoaWxkcmVuW2ldLnZpZCA9PT0gcGFyZW50SWQpIHtcbiAgICAgICAgICBpZiAoIWNoaWxkcmVuW2ldLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICBjaGlsZHJlbltpXS5jaGlsZHJlbiA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjaGlsZHJlbltpXS5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDAsIHRhcmdldCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5zZXJ0Tm9kZShwYXJlbnRJZCwgaW5kZXgsIGNoaWxkcmVuW2ldLCB0YXJnZXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGRlYnVnZ2VyO1xuICByZXR1cm4gbm9kZTtcbn1cblxuZnVuY3Rpb24gZGVsTm9kZShwYXJlbnRJZCwgaW5kZXgsIG5vZGUpIHtcbiAgaWYgKG5vZGUpIHtcbiAgICBjb25zdCBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChjaGlsZHJlbltpXS52aWQgPT09IHBhcmVudElkKSB7XG4gICAgICAgICAgaWYgKCFjaGlsZHJlbltpXS5jaGlsZHJlbikge1xuICAgICAgICAgICAgY2hpbGRyZW5baV0uY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2hpbGRyZW5baV0uY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWxOb2RlKHBhcmVudElkLCBpbmRleCwgY2hpbGRyZW5baV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBub2RlO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVOb2RlKHBhcmVudElkLCBpbmRleCwgbm9kZSwgdGFyZ2V0KSB7XG4gIGlmIChub2RlKSB7XG4gICAgY29uc3QgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoY2hpbGRyZW5baV0udmlkID09PSBwYXJlbnRJZCkge1xuICAgICAgICAgIGlmICghY2hpbGRyZW5baV0uY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGNoaWxkcmVuW2ldLmNoaWxkcmVuID0gW107XG4gICAgICAgICAgfVxuICAgICAgICAgIGNoaWxkcmVuW2ldLmNoaWxkcmVuLnNwbGljZShpbmRleCwgMSwgdGFyZ2V0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1cGRhdGVOb2RlKHBhcmVudElkLCBpbmRleCwgY2hpbGRyZW5baV0sIHRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5vZGU7XG59XG5cbi8vIOiOt+WPluebuOWvuSgwLDAp55qE44CB5omT5bmz5Li65LiA57qn6IqC54K555qE57ud5a+55Z2Q5qCHdHBs5YiX6KGoLGxlZnQvdG9w5YGa5bGC57qn5Y+g5YqgXG5mdW5jdGlvbiBnZXROb2RlQWJzb2x1dGVMZWZ0VG9wKG5vZGUsIGdsb2JhbFdpZHRoLCBnbG9iYWxIZWlnaHQsIG5vZGVMaXN0ID0gW10pIHtcbiAgc2V0U3RyaW5nUHJvdG90eXBlKDEsIDEpO1xuICBpZiAobm9kZSkge1xuICAgIG5vZGVMaXN0LnB1c2gobm9kZSk7XG4gICAgY29uc3QgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBjb25zdCB4ID0gY2hpbGRyZW5baV0ucHJvY2Vzc2VkTG9jYXRpb24ueDtcbiAgICAgICAgLy8gY29uc3QgeSA9IGNoaWxkcmVuW2ldLnByb2Nlc3NlZExvY2F0aW9uLnk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHgsIHkpO1xuICAgICAgICBjaGlsZHJlbltpXS5wcm9jZXNzZWRMb2NhdGlvbi54ICs9IChub2RlLnByb2Nlc3NlZExvY2F0aW9uID8gbm9kZS5wcm9jZXNzZWRMb2NhdGlvbi54IDogMCk7XG4gICAgICAgIGNoaWxkcmVuW2ldLnByb2Nlc3NlZExvY2F0aW9uLnkgKz0gbm9kZS5wcm9jZXNzZWRMb2NhdGlvbiA/IG5vZGUucHJvY2Vzc2VkTG9jYXRpb24ueSA6IDA7XG5cbiAgICAgICAgZ2V0Tm9kZUFic29sdXRlTGVmdFRvcChjaGlsZHJlbltpXSwgZ2xvYmFsV2lkdGgsIGdsb2JhbEhlaWdodCwgbm9kZUxpc3QpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyDlj7blrZDoioLngrnkvY3nva5cblxuICAgIH1cbiAgfVxuICByZXR1cm4gbm9kZUxpc3Quc2xpY2UoMSk7XG59XG5cbmZ1bmN0aW9uIGN1c0dldEVsZW1lbnRCeUlkQnlERlMyKHBhcmVudE5vZGUsIGlkKSB7XG4gIGlmICghcGFyZW50Tm9kZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIC8vIOa3seW6puS8mOWFiCwg6Z2e6YCS5b2S5a6e546w77yMIOS9v+eUqOagiFxuICBsZXQgc3RhY2sgPSBbXTtcbiAgaWYgKHBhcmVudE5vZGUudmlkID09PSBpZCkge1xuICAgIHJldHVybiBwYXJlbnROb2RlO1xuICB9XG4gIGZvciAobGV0IGkgPSBwYXJlbnROb2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA+IDA7IGktLSkge1xuICAgIHN0YWNrLnB1c2gocGFyZW50Tm9kZS5jaGlsZHJlbltpIC0gMV0pO1xuICB9XG4gIHdoaWxlIChzdGFjay5sZW5ndGgpIHtcbiAgICBjb25zdCBub2RlID0gc3RhY2sucG9wKCk7XG4gICAgaWYgKG5vZGUudmlkID09PSBpZCkge1xuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICAgIGlmIChub2RlLmNoaWxkcmVuICYmIG5vZGUuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgc3RhY2sgPSBBcnJheS5mcm9tKG5vZGUuY2hpbGRyZW4pLmNvbmNhdChzdGFjayk7XG4gICAgfVxuICB9XG59XG4iXX0=