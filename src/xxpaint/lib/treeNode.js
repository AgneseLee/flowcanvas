"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var TreeNode = (function () {
    function TreeNode(children) {
        this.children = children || [];
        this.parent = null;
        this.root = null;
        this.pre = null;
        this.next = null;
    }
    TreeNode.connectChildren = function (el) {
        if (el.hasChildren()) {
            el.children = el.children.filter(function (item) { return item instanceof TreeNode; });
            el._getChildren().map(function (child, index) {
                child._setParent(el);
                child._setSibling(el._getChildren()[index - 1], el._getChildren()[index + 1]);
                TreeNode.connectChildren(child);
            });
        }
        else {
        }
    };
    TreeNode.prototype.hasChildren = function () {
        return !!(Array.isArray(this.children) && this.children.length);
    };
    TreeNode.prototype._getChildren = function () {
        return this.hasChildren() ? this.children : [];
    };
    TreeNode.prototype._setParent = function (element) {
        this.parent = element;
        this.root = element.root;
    };
    TreeNode.prototype._setSibling = function (pre, next) {
        this.pre = pre || null;
        this.next = next || null;
    };
    TreeNode.prototype.appendChild = function (treeNode) {
        if (!treeNode instanceof TreeNode)
            throw Error('Unknown treeNode type');
        var pre = this._getChildren()[this._getChildren().length - 1];
        pre && pre._setSibling(pre.pre, treeNode);
        this.children.push(treeNode);
        treeNode._setParent(this);
        treeNode._setSibling(pre, null);
    };
    TreeNode.prototype.prependChild = function (treeNode) {
        if (!treeNode instanceof TreeNode)
            throw Error('Unknown treeNode type');
        var next = this._getChildren()[0];
        next && next._setSibling(treeNode, next.next);
        this.children.unshift(treeNode);
        treeNode._setParent(this);
        treeNode._setSibling(null, next);
    };
    TreeNode.prototype.removeChild = function (treeNode) {
        if (!treeNode instanceof TreeNode)
            throw Error('Unknown treeNode type');
        var index = this._getChildren().indexOf(treeNode);
        if (index < 0)
            throw Error('treeNode must be the child of parent');
        var pre = this._getChildren()[index - 1];
        var next = this._getChildren()[index + 1];
        if (pre) {
            pre._setSibling(pre.pre, next);
        }
        if (next) {
            next._setSibling(pre, next.next);
        }
        this.children.splice(index, 1);
    };
    TreeNode.prototype.remove = function () {
        if (!this.parent) {
            throw Error('Can not remove root node');
        }
        this.parent.removeChild(this);
    };
    TreeNode.prototype.append = function (treeNode) {
        var _this = this;
        if (!treeNode instanceof TreeNode)
            throw Error('Unknown treeNode type');
        if (!this.parent)
            throw Error('Can not add treeNode to root level!');
        var children = [];
        treeNode._setParent(this.parent);
        this.parent.children.forEach(function (child, index) {
            children.push(child);
            if (child === _this) {
                treeNode._setSibling(child, _this.parent.children[index + 1]);
                children.push(treeNode);
            }
        });
        this.parent.children = children;
    };
    TreeNode.prototype.prepend = function (treeNode) {
        if (!treeNode instanceof TreeNode)
            throw Error('Unknown treeNode type');
        if (!this.parent)
            throw Error('Can not add treeNode to root level!');
        var children = [];
        treeNode._setParent(this.parent);
        for (var i = this.parent.children.length - 1; i >= 0; i--) {
            children.unshift(this.parent.children[i]);
            if (this.parent.children[i] === this) {
                treeNode._setSibling(this.parent.children[i - 1], this.parent.children[i]);
                children.unshift(treeNode);
            }
        }
        this.parent.children = children;
    };
    return TreeNode;
}());
exports.default = TreeNode;
//# sourceMappingURL=data:application/json;base64,