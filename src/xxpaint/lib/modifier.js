"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var setStringPrototype = require('./util').setStringPrototype;
var Modifier = (function () {
    function Modifier(tpl) {
        var copyTpl = JSON.parse(JSON.stringify(tpl));
        this.tpl = copyTpl;
        this.views = copyTpl.views;
    }
    Modifier.prototype.insert = function (target, parentId, index) {
        if (parentId && !Number.isNaN(index)) {
            var flag = this.find(parentId);
            if (flag.length === 0)
                return;
            var node = { children: this.views };
            target.f_sid = parentId;
            return insertNode(parentId, index, node, target);
        }
    };
    Modifier.prototype.find = function (targetId) {
        var xx = cusGetElementByIdByDFS2({ children: this.views }, targetId);
        return xx;
    };
    Modifier.prototype.findParentNodeOf = function (node) {
        var targetId = node.f_sid;
        if (!targetId)
            return null;
        return this.find(targetId);
    };
    Modifier.prototype.del = function (parentId, index) {
        if (parentId && !Number.isNaN(index)) {
            var flag = this.find(parentId);
            if (flag.length === 0)
                return;
            var node = { children: this.views };
            return delNode(parentId, index, node);
        }
    };
    Modifier.prototype.update = function (target, parentId, index) {
        if (parentId && !Number.isNaN(index)) {
            var flag = this.find(parentId);
            if (flag.length === 0)
                return;
            var node = { children: this.views };
            return updateNode(parentId, index, node, target);
        }
    };
    Modifier.prototype.updateTree = function (changeNodeId, updateLeft, updateTop) {
        if (updateLeft === void 0) { updateLeft = false; }
        if (updateTop === void 0) { updateTop = true; }
        var targetNode = this.find(changeNodeId);
        var parentNode = this.find(targetNode.f_sid);
        var targetHeight = targetNode.css.height.toPx();
        var _z = this;
        (function dfs(target) {
            if (!target)
                return false;
            var _parentNode = _z.findParentNodeOf(target);
            if (!_parentNode) {
                if (_z.tpl.height === 'auto') {
                    var allH = _z.views.reduce(function (pre, next) {
                        var nextHeight = next.css.height ? next.css.height : '0px';
                        var sum = pre.toPx() + nextHeight.toPx();
                        return sum + "px";
                    }, '0px');
                    if (_z.tpl.paddingbottom) {
                        allH = allH.toPx() + _z.tpl.paddingbottom.toPx();
                        allH = allH + "px";
                    }
                    _z.tpl.height = allH;
                }
                else {
                    _z.tpl.height += targetHeight;
                    _z.tpl.height = _z.tpl.height + "px";
                }
                return false;
            }
            if (_parentNode.css.height.indexOf('px') < 0) {
                var height = _parentNode.children.reduce(function (pre, next) {
                    var nextHeight = next.css.height ? next.css.height : '0px';
                    var sum = pre.toPx() + nextHeight.toPx();
                    return sum + "px";
                }, '0px');
                _parentNode.css.height = height;
                _parentNode.processedLocation.height = height.toPx();
            }
            return dfs(_parentNode);
        }(targetNode));
        var allSiblingNodes = parentNode.children;
        var startChangeBtn = false;
        for (var _i = 0, allSiblingNodes_1 = allSiblingNodes; _i < allSiblingNodes_1.length; _i++) {
            var n = allSiblingNodes_1[_i];
            if (n.vid === changeNodeId) {
                startChangeBtn = true;
            }
            if (!startChangeBtn)
                continue;
            if (updateTop) {
                var paddingbottom = targetNode.css.paddingbottom ? targetNode.css.paddingbottom.toPx() : 0;
                n.processedLocation.y += targetNode.processedLocation ? targetNode.processedLocation.height : 0;
                n.processedLocation.y += paddingbottom;
            }
            if (updateLeft) {
                n.processedLocation.x += (targetNode.processedLocation ? targetNode.processedLocation.width : 0);
            }
        }
        this.views = this.tpl.views;
        return this.tpl;
    };
    Modifier.prototype.getAbsoluteTpl = function (_a) {
        var globalWidth = _a.globalWidth, globalHeight = _a.globalHeight;
        var node = { children: this.views };
        return __assign(__assign({}, this.tpl), { views: getNodeAbsoluteLeftTop(node, globalWidth, globalHeight) });
    };
    return Modifier;
}());
exports.default = Modifier;
function insertNode(parentId, index, node, target) {
    if (node) {
        var children = node.children;
        if (children) {
            for (var i = 0; i < children.length; i++) {
                if (children[i].vid === parentId) {
                    if (!children[i].children) {
                        children[i].children = [];
                    }
                    children[i].children.splice(index, 0, target);
                    break;
                }
                else {
                    insertNode(parentId, index, children[i], target);
                }
            }
        }
    }
    return node;
}
function delNode(parentId, index, node) {
    if (node) {
        var children = node.children;
        if (children) {
            for (var i = 0; i < children.length; i++) {
                if (children[i].vid === parentId) {
                    if (!children[i].children) {
                        children[i].children = [];
                    }
                    children[i].children.splice(index, 1);
                    break;
                }
                else {
                    delNode(parentId, index, children[i]);
                }
            }
        }
    }
    return node;
}
function updateNode(parentId, index, node, target) {
    if (node) {
        var children = node.children;
        if (children) {
            for (var i = 0; i < children.length; i++) {
                if (children[i].vid === parentId) {
                    if (!children[i].children) {
                        children[i].children = [];
                    }
                    children[i].children.splice(index, 1, target);
                    break;
                }
                else {
                    updateNode(parentId, index, children[i], target);
                }
            }
        }
    }
    return node;
}
function getNodeAbsoluteLeftTop(node, globalWidth, globalHeight, nodeList) {
    if (nodeList === void 0) { nodeList = []; }
    setStringPrototype(1, 1);
    if (node) {
        nodeList.push(node);
        var children = node.children;
        if (children) {
            for (var i = 0; i < children.length; i++) {
                children[i].processedLocation.x += (node.processedLocation ? node.processedLocation.x : 0);
                children[i].processedLocation.y += node.processedLocation ? node.processedLocation.y : 0;
                getNodeAbsoluteLeftTop(children[i], globalWidth, globalHeight, nodeList);
            }
        }
        else {
        }
    }
    return nodeList.slice(1);
}
function cusGetElementByIdByDFS2(parentNode, id) {
    if (!parentNode) {
        return null;
    }
    var stack = [];
    if (parentNode.vid === id) {
        return parentNode;
    }
    for (var i = parentNode.children.length; i > 0; i--) {
        stack.push(parentNode.children[i - 1]);
    }
    while (stack.length) {
        var node = stack.pop();
        if (node.vid === id) {
            return node;
        }
        if (node.children && node.children.length > 0) {
            stack = Array.from(node.children).concat(stack);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,