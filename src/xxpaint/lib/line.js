"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.insertVnodeIntoLine = void 0;
var layout_1 = require("./layout");
var util_1 = require("./util");
function _createLine(node) {
    var parent = node.parent;
    var _a = util_1.formatPaddingMargin(node.css), paddingLeft = _a.paddingLeft, marginLeft = _a.marginLeft, paddingTop = _a.paddingTop, marginTop = _a.marginTop;
    var x = parent.renderStyle.contentX;
    var y = layout_1.getPreLayout(node).y + layout_1.getPreLayout(node).height;
    var renderStyle = {
        x: x,
        y: y,
        contentX: x + paddingLeft + marginLeft,
        contentY: y + paddingTop + marginTop,
    };
    var line = {
        width: node.parent.processedLocation.width,
        height: node.processedLocation.height,
        paddingTop: node.css.paddingTop ? node.css.paddingTop.toPx() : 0,
        paddingBottom: node.css.paddingBottom ? node.css.paddingBottom.toPx() : 0,
        paddingLeft: node.css.paddingLeft ? node.css.paddingLeft.toPx() : 0,
        paddingRight: node.css.paddingRight ? node.css.paddingRight.toPx() : 0,
        marginLeft: node.css.marginLeft ? node.css.marginLeft.toPx() : 0,
        marginRight: node.css.marginRight ? node.css.marginRight.toPx() : 0,
        marginTop: node.css.marginTop ? node.css.marginTop.toPx() : 0,
        marginBottom: node.css.marginBottom ? node.css.marginBottom.toPx() : 0,
        children: [],
    };
    return Object.assign(line, renderStyle);
}
function _updateLineLayout(line) {
    var widthSum = line.children.reduce(function (pre, next) {
        var _a = _getPreLayoutInLine(next, line), x = _a.x, y = _a.y, preW = _a.width;
        var childPaddingLeft = next.css.paddingLeft ? next.css.paddingLeft.toPx() : 0;
        var childMarginLeft = next.css.marginLeft ? next.css.marginLeft.toPx() : 0;
        var currW = next.processedLocation.width;
        var nextStartX = x + preW + childPaddingLeft + childMarginLeft + currW;
        return nextStartX + pre;
    }, 0);
    line.width = Math.max(widthSum, line.width);
    var updatedLayout = line.children.reduce(function (pre, next) {
        var childPaddingTop = next.css.paddingTop ? next.css.paddingTop.toPx() : 0;
        var childPaddingBottom = next.css.paddingBochildPaddingBottom ? next.css.paddingBochildPaddingBottom.toPx() : 0;
        var childMarginTop = next.css.marginTop ? next.css.marginTop.toPx() : 0;
        var childMarginBottom = next.css.marginBottom ? next.css.marginBottom.toPx() : 0;
        var currH = next.processedLocation.height;
        return {
            h: Math.max(currH, pre.h),
            pt: Math.max(childPaddingTop, pre.pt),
            pb: Math.max(childPaddingBottom, pre.pb),
            mt: Math.max(childMarginTop, pre.mt),
            mb: Math.max(childMarginBottom, pre.mb),
        };
    }, { h: 0, pt: 0, pb: 0, mt: 0, mb: 0 });
    var h = updatedLayout.h, pt = updatedLayout.pt, pb = updatedLayout.pb, mt = updatedLayout.mt, mb = updatedLayout.mb;
    line.paddingTop = pt;
    line.paddingBottom = pb;
    line.marginTop = mt;
    line.marginBottom = mb;
    line.height = h;
    _updateElementLayout(line);
}
function _getPreLayoutInLine(targetNode, line) {
    var idx = line.children.findIndex(function (x) { return x === targetNode; });
    var preEleInLine = line.children[idx - 1];
    if (idx < 0) {
        console.error('找不到行内元素');
        return {
            width: 0,
            height: 0,
            x: 0,
            y: 0,
        };
    }
    if (idx > 0) {
        return {
            width: preEleInLine.processedLocation.width,
            height: preEleInLine.processedLocation.height,
            x: preEleInLine.renderStyle.contentX,
            y: preEleInLine.renderStyle.contentY,
        };
    }
    return {
        width: 0,
        height: 0,
        x: line && _getContainerLineLayout(line).contentX,
        y: line && _getContainerLineLayout(line).contentY,
    };
}
function _getContainerLineLayout(container) {
    if (!container) {
        if (!container) {
            debugger;
        }
        container = {
            renderStyles: {
                width: container.processedLocation.width,
                height: container.processedLocation.height,
                paddingTop: 0,
                paddingBottom: 0,
                paddingLeft: 0,
                paddingRight: 0,
                marginLeft: 0,
                marginRight: 0,
                marginTop: 0,
                marginBottom: 0,
            },
            x: 0,
            y: 0,
            contentX: 0,
            contentY: 0,
        };
    }
    var res = {
        width: container.width,
        height: container.height,
        x: container.x,
        y: container.y,
        paddingTop: container.paddingTop ? container.paddingTop : 0,
        paddingBottom: container.paddingBottom ? container.paddingBottom : 0,
        paddingLeft: container.paddingLeft ? container.paddingLeft : 0,
        paddingRight: container.paddingRight ? container.paddingRight : 0,
        marginLeft: container.marginLeft ? container.marginLeft : 0,
        marginRight: container.marginRight ? container.marginRight : 0,
        marginTop: container.marginTop ? container.marginTop : 0,
        marginBottom: container.marginBottom ? container.marginBottom : 0,
    };
    res.contentX = res.x + res.paddingLeft;
    res.contentY = res.y + res.paddingTop;
    return res;
}
function _updateElementLayout(line) {
    line.children.forEach(function (el) {
        var _a = util_1.formatPaddingMargin(el.css), paddingLeft = _a.paddingLeft, marginLeft = _a.marginLeft, paddingTop = _a.paddingTop, marginTop = _a.marginTop;
        var x = _getPreLayoutInLine(el, line).x + _getPreLayoutInLine(el, line).width;
        var y = line.y;
        var renderStyle = {
            x: x,
            y: y,
            contentX: x + paddingLeft + marginLeft,
            contentY: y + line.paddingTop + line.marginTop,
        };
        el.renderStyle = renderStyle;
    });
}
var insertVnodeIntoLine = function (vnode, changeLine) {
    if (changeLine || vnode.parent.lines.length === 0) {
        var newLine = _createLine(vnode);
        newLine.children.push(vnode);
        vnode.parent.lines.push(newLine);
        _updateLineLayout(newLine);
        return;
    }
    if (vnode.parent.lines.length > 0) {
        var currLine = vnode.parent.lines[vnode.parent.lines.length - 1];
        currLine.children.push(vnode);
        _updateLineLayout(currLine);
    }
};
exports.insertVnodeIntoLine = insertVnodeIntoLine;
//# sourceMappingURL=data:application/json;base64,