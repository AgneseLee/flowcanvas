"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util = require('./util');
var SAVED_FILES_KEY = 'savedFiles';
var KEY_TOTAL_SIZE = 'totalSize';
var KEY_PATH = 'path';
var KEY_TIME = 'time';
var KEY_SIZE = 'size';
var MAX_SPACE_IN_B = 6 * 1024 * 1024;
var savedFiles = {};
var Dowloader = (function () {
    function Dowloader() {
        wx.getStorage({
            key: SAVED_FILES_KEY,
            success: function (res) {
                if (res.data) {
                    savedFiles = res.data;
                }
            },
        });
    }
    Dowloader.prototype.download = function (url) {
        return new Promise(function (resolve, reject) {
            if (!(url && util.isValidUrl(url))) {
                resolve(url);
                return;
            }
            var file = getFile(url);
            if (file) {
                wx.getSavedFileInfo({
                    filePath: file[KEY_PATH],
                    success: function (res) {
                        resolve(file[KEY_PATH]);
                    },
                    fail: function (error) {
                        console.error("the file is broken, redownload it, " + JSON.stringify(error));
                        downloadFile(url).then(function (path) {
                            resolve(path);
                        }, function () {
                            reject();
                        });
                    },
                });
            }
            else {
                downloadFile(url).then(function (path) {
                    resolve(path);
                }, function () {
                    reject();
                });
            }
        });
    };
    return Dowloader;
}());
exports.default = Dowloader;
function downloadFile(url) {
    return new Promise(function (resolve, reject) {
        wx.downloadFile({
            url: url,
            success: function (res) {
                if (res.statusCode !== 200) {
                    console.error("downloadFile " + url + " failed res.statusCode is not 200");
                    reject();
                    return;
                }
                var tempFilePath = res.tempFilePath;
                try {
                    wx.getFileInfo({
                        filePath: tempFilePath,
                        success: function (tmpRes) {
                            var newFileSize = tmpRes.size;
                            doLru(newFileSize).then(function () {
                                saveFile(url, newFileSize, tempFilePath).then(function (filePath) {
                                    resolve(filePath);
                                });
                            }, function () {
                                resolve(tempFilePath);
                            });
                        },
                        fail: function (error) {
                            console.error("getFileInfo " + res.tempFilePath + " failed, " + JSON.stringify(error));
                            resolve(res.tempFilePath);
                        },
                    });
                }
                catch (e) {
                    resolve(tempFilePath);
                }
            },
            fail: function (error) {
                console.error("downloadFile failed, " + JSON.stringify(error) + " ");
                reject();
            },
        });
    });
}
function saveFile(key, newFileSize, tempFilePath) {
    return new Promise(function (resolve, reject) {
        wx.saveFile({
            tempFilePath: tempFilePath,
            success: function (fileRes) {
                var totalSize = savedFiles[KEY_TOTAL_SIZE] ? savedFiles[KEY_TOTAL_SIZE] : 0;
                savedFiles[key] = {};
                savedFiles[key][KEY_PATH] = fileRes.savedFilePath;
                savedFiles[key][KEY_TIME] = new Date().getTime();
                savedFiles[key][KEY_SIZE] = newFileSize;
                savedFiles.totalSize = newFileSize + totalSize;
                wx.setStorage({
                    key: SAVED_FILES_KEY,
                    data: savedFiles,
                });
                resolve(fileRes.savedFilePath);
            },
            fail: function (error) {
                console.error("saveFile " + key + " failed, then we delete all files, " + JSON.stringify(error));
                resolve(tempFilePath);
                reset();
            },
        });
    });
}
function reset() {
    wx.removeStorage({
        key: SAVED_FILES_KEY,
        success: function () {
            wx.getSavedFileList({
                success: function (listRes) {
                    removeFiles(listRes.fileList);
                },
                fail: function (getError) {
                    console.error("getSavedFileList failed, " + JSON.stringify(getError));
                },
            });
        },
    });
}
function doLru(size) {
    return new Promise(function (resolve, reject) {
        var totalSize = savedFiles[KEY_TOTAL_SIZE] ? savedFiles[KEY_TOTAL_SIZE] : 0;
        if (size + totalSize <= MAX_SPACE_IN_B) {
            resolve();
            return;
        }
        var pathsShouldDelete = [];
        var allFiles = JSON.parse(JSON.stringify(savedFiles));
        delete allFiles[KEY_TOTAL_SIZE];
        var sortedKeys = Object.keys(allFiles).sort(function (a, b) {
            return allFiles[a][KEY_TIME] - allFiles[b][KEY_TIME];
        });
        for (var _i = 0, sortedKeys_1 = sortedKeys; _i < sortedKeys_1.length; _i++) {
            var sortedKey = sortedKeys_1[_i];
            totalSize -= savedFiles[sortedKey].size;
            pathsShouldDelete.push(savedFiles[sortedKey][KEY_PATH]);
            delete savedFiles[sortedKey];
            if (totalSize + size < MAX_SPACE_IN_B) {
                break;
            }
        }
        savedFiles.totalSize = totalSize;
        wx.setStorage({
            key: SAVED_FILES_KEY,
            data: savedFiles,
            success: function () {
                if (pathsShouldDelete.length > 0) {
                    removeFiles(pathsShouldDelete);
                }
                resolve();
            },
            fail: function (error) {
                console.error("doLru setStorage failed, " + JSON.stringify(error));
                reject();
            },
        });
    });
}
function removeFiles(pathsShouldDelete) {
    var _loop_1 = function (pathDel) {
        var delPath = pathDel;
        if (typeof pathDel === 'object') {
            delPath = pathDel.filePath;
        }
        wx.removeSavedFile({
            filePath: delPath,
            fail: function (error) {
                console.error("removeSavedFile " + pathDel + " failed, " + JSON.stringify(error));
            },
        });
    };
    for (var _i = 0, pathsShouldDelete_1 = pathsShouldDelete; _i < pathsShouldDelete_1.length; _i++) {
        var pathDel = pathsShouldDelete_1[_i];
        _loop_1(pathDel);
    }
}
function getFile(key) {
    if (!savedFiles[key]) {
        return;
    }
    savedFiles[key].time = new Date().getTime();
    wx.setStorage({
        key: SAVED_FILES_KEY,
        data: savedFiles,
    });
    return savedFiles[key];
}
//# sourceMappingURL=data:application/json;base64,